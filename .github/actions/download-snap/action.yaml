name: Download snap package
author: Zygmunt Krynicki
description: |
  Download snap action using an initialized WSL wsl-distro-name
  and store the file in a directory on the Windows host.
inputs:
  wsl-distro-name:
    description: Name of the WSL wsl-distro-name to use
    required: true
  snap-name:
    description: Name of the snap in the store
    required: true
  snap-revision:
    description: Revision to download (mutually exclusive with channel)
  snap-channel:
    description: Name of the channel to use (mutually exclusive with revision)
    default: latest/stable
  snaps-dir:
    description: Directory where snaps should be stored
    default: snaps
outputs:
  snap-name:
    description: Name of the downloaded snap
    value: ${{ inputs.snap-name }}
  snap-revision:
    description: Revision of the downloaded snap
    value: ${{ inputs.snap-revision && inputs.snap-revision || steps.query-store.outputs.snap-revision }}
  offline-snaps-dir:
    description: Directory where downloaded snaps and assertions are stored
    value: ${{ inputs.snaps-dir }}
branding:
  icon: download
  color: orange
runs:
  using: composite
  steps:
    - name: Use specific revision
      if: ${{ inputs.snap-revision != '' }}
      shell: pwsh
      env:
        SNAP_NAME: ${{ inputs.snap-name }}
        SNAP_REVISION: ${{ inputs.snap-revision }}
      run: |
        Set-StrictMode -version latest
        Add-Content -LiteralPath ${Env:GITHUB_OUTPUT} -Value "snap-revision=${Env:SNAP_REVISION}"
        Write-Output "Snap ${Env:SNAP_NAME} using fixed revision ${Env:SNAP_REVISION}."
    - name: Query the Snap Store
      id: query-store
      if: ${{ inputs.snap-revision == '' }}
      env:
        SNAP_NAME: ${{ inputs.snap-name }}
        SNAP_CHANNEL: ${{ inputs.snap-channel }}
        WSL_DISTRO_NAME: ${{ inputs.wsl-distro-name }}
      shell: pwsh
      run: |
        Set-StrictMode -version latest
        $Response = $(wsl --distribution ${Env:WSL_DISTRO_NAME} --user root curl -sS --unix-socket /run/snapd.socket http://localhost/v2/find?name=${Env:SNAP_NAME}) | ConvertFrom-Json
        $SnapRevision = $Response.result[0].channels."${Env:SNAP_CHANNEL}".revision
        Add-Content -LiteralPath ${Env:GITHUB_OUTPUT} -Value "snap-revision=${SnapRevision}"
        Write-Output "Current revision of snap ${Env:SNAP_NAME} in channel ${Env:SNAP_CHANNEL} is ${SnapRevision}."
    - name: Cache ${{ inputs.snap-name }}
      id: cache-snap
      uses: actions/cache@v4
      with:
        path: |
          ${{ inputs.snaps-dir }}/${{ inputs.snap-name }}_${{ inputs.snap-revision && inputs.snap-revision || steps.query-store.outputs.snap-revision }}.snap
          ${{ inputs.snaps-dir }}/${{ inputs.snap-name }}_${{ inputs.snap-revision && inputs.snap-revision || steps.query-store.outputs.snap-revision }}.assert
        key: snaps/${{ inputs.snap-name }}-${{ inputs.snap-revision && inputs.snap-revision || steps.query-store.outputs.snap-revision }}
    - name: Download ${{ inputs.snap-name }}
      if: ${{ steps.cache-snap.outputs.cache-hit != 'true' }}
      env:
        SNAP_NAME: ${{ inputs.snap-name }}
        SNAP_REVISION: ${{ inputs.snap-revision && inputs.snap-revision || steps.query-store.outputs.snap-revision }}
        SNAPS_DIR: ${{ inputs.snaps-dir }}
        WSL_DISTRO_NAME: ${{ inputs.wsl-distro-name }}
      shell: pwsh
      run: |
        Set-StrictMode -version latest
        Write-Output "Downloading ${Env:SNAP_NAME} snap..."
        if ( -not ( Test-Path -PathType Container -LiteralPath ${Env:SNAPS_DIR} ) ) {
          New-Item -ItemType Directory -Name ${Env:SNAPS_DIR}
          if ( ! $? ) {
            Write-Error "Cannot create ${Env:SNAPS_DIR} directory."
            exit 1
          }
        }
        $wslSnapsDir = $(wsl --distribution ${Env:WSL_DISTRO_NAME} wslpath -u `'${Env:GITHUB_WORKSPACE}\${Env:SNAPS_DIR}`')
        Write-Output "Snaps will be saved to ${wslSnapsDir}"
        wsl --distribution ${Env:WSL_DISTRO_NAME} --cd ${wslSnapsDir} snap download --revision=${Env:SNAP_REVISION} ${Env:SNAP_NAME} || (Write-Error "Cannot download snap ${Env:SNAP_NAME} revision ${Env:SNAP_REVISION}." && Exit 1)
        ls ${Env:GITHUB_WORKSPACE}
        ls ${Env:SNAPS_DIR}
